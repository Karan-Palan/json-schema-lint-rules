{
  "title": "Remove `type` when `enum` is present",
  "description": "`enum` already restricts the allowed primitive types. A separate `type` is redundant or can even contradict the enumeration.",
  "examples": [
    {
      "after": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "enum": [ 1, 2, 3 ]
      },
      "before": {
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "integer",
        "enum": [ 1, 2, 3 ]
      },
      "doc": true
    },
    {
      "after": {
        "enum": [ "none", "some", null ]
      },
      "before": {
        "type": [ "string", "null" ],
        "enum": [ "none", "some", null ]
      }
    },
    {
      "after": {
        "enum": [ true, false ]
      },
      "before": {
        "type": "boolean",
        "enum": [ true, false ]
      }
    }
  ],
  "comprehensiveExamples": [
    {
      "title": "Wrong: Redundant scalar type with enum",
      "description": "Drop `type` when enum already constrains allowed types.",
      "before": { "type": "integer", "enum": [1,2,3] },
      "after": { "enum": [1,2,3] }
    },
    {
      "title": "Wrong: Union type with enum",
      "description": "Enum values already include null; union type is unnecessary.",
      "before": { "type": ["string","null"], "enum": ["none","some", null] },
      "after": { "enum": ["none","some", null] }
    },
    {
      "title": "Right: Enum alone",
      "description": "Enum without type is sufficient and clear.",
      "before": { "enum": [true,false] },
      "after": { "enum": [true,false] }
    }
  ],
  "autofixable": true,
  "categories": [ "readability" ],
  "dialects": {
    "2019-09": [ "enum", "type" ],
    "2020-12": [ "enum", "type" ],
    "draft4": [ "enum", "type" ],
    "draft6": [ "enum", "type" ],
    "draft7": [ "enum", "type" ]
  },
  "message": "Delete the redundant `type` keyword (or drop `enum`).",
  "references": [ "https://www.learnjsonschema.com/2020-12/validation/enum/" ]
}
